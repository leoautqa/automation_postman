{
	"info": {
		"_postman_id": "8a9aa0e7-ad6d-4ab2-86e2-6bcba3606cac",
		"name": "Serverest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17105271"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "1 - Creat Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"id\", data._id);\r",
									"\r",
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    pm.expect(data.message).to.be.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": \"true\",\r\n    \"email\": \"leoadmin@api.com\",\r\n    \"nome\": \"Leo Admin API\",\r\n    \"password\" :\"LeoApi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Login admin account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Login realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"leoadmin@api.com\",\r\n  \"password\": \"LeoApi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Delete admin account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: This email is already in use\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Creat Regular User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"id\", data._id);\r",
									"\r",
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    pm.expect(data.message).to.be.eql(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": \"false\",\r\n    \"email\": \"leoregular@api.com\",\r\n    \"nome\": \"Leo Regular API\",\r\n    \"password\" :\"Leoapi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 - Login regular account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Login realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"leoregular@api.com\",\r\n  \"password\" :\"Leoapi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "6 - Delete regular account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"_id\": \"03JOloYqhuHrg8oJ\",\r\n    \"email\": \"Katherine.Cruickshank52@hotmail.com\",\r\n    \"nome\": \"Vergie\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7 - Login doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Email e/ou senha inválidos\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"dontexist@api.com\",\r\n  \"password\": \"LeoApi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "8 - Login null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.email).to.be.eql(\"email deve ser uma string\");\r",
									"    pm.expect(data.password).to.be.eql(\"password deve ser uma string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": null,\r\n  \"password\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "9 - Login empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.email).to.be.eql(\"email não pode ficar em branco\");\r",
									"    pm.expect(data.password).to.be.eql(\"password não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "1 - List Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/usuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Creat Regular User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"id\", data._id);\r",
									"\r",
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    pm.expect(data.message).to.be.eql(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": \"false\",\r\n    \"email\": \"leo@api.com\",\r\n    \"nome\": \"Leo API\",\r\n    \"password\" :\"LeoApi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Creat Regular user already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Este email já está sendo usado\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": \"false\",\r\n    \"email\": \"leo@api.com\",\r\n    \"nome\": \"Leo API\",\r\n    \"password\" :\"LeoApi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Creat User Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Messages\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.nome).to.be.eql(\"nome deve ser uma string\");\r",
									"    pm.expect(data.email).to.be.eql(\"email deve ser uma string\");\r",
									"    pm.expect(data.password).to.be.eql(\"password deve ser uma string\");\r",
									"    pm.expect(data.administrador).to.be.eql(\"administrador deve ser 'true' ou 'false'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": null,\r\n    \"email\": null,\r\n    \"nome\": null,\r\n    \"password\" :null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 - Creat User empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Messages\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.nome).to.be.eql(\"nome não pode ficar em branco\");\r",
									"    pm.expect(data.email).to.be.eql(\"email não pode ficar em branco\");\r",
									"    pm.expect(data.password).to.be.eql(\"password não pode ficar em branco\");\r",
									"    pm.expect(data.administrador).to.be.eql(\"administrador deve ser 'true' ou 'false'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": \"\",\r\n    \"email\": \"\",\r\n    \"nome\": \"\",\r\n    \"password\" :\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "6 - Search user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/usuarios/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7 - Search user by ID Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"User not found \", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Usuário não encontrado\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"null\", null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/usuarios/{{null}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{null}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "8 - Search user by ID String",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"User not found \", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Usuário não encontrado\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"string\", \"test\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/usuarios/{{string}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{string}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "9 - Edit user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Registration changed successfully\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro alterado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": \"false\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"nome\": \"{{$randomFullName}}\",\r\n    \"password\" :\"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "10 - Edit user Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.nome).to.be.eql(\"nome deve ser uma string\");\r",
									"    pm.expect(data.email).to.be.eql(\"email deve ser uma string\");\r",
									"    pm.expect(data.password).to.be.eql(\"password deve ser uma string\");\r",
									"    pm.expect(data.administrador).to.be.eql(\"administrador deve ser 'true' ou 'false'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": null,\r\n    \"email\": null,\r\n    \"nome\": null,\r\n    \"password\" :null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "11 - Edit user Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.nome).to.be.eql(\"nome não pode ficar em branco\");\r",
									"    pm.expect(data.email).to.be.eql(\"email não pode ficar em branco\");\r",
									"    pm.expect(data.password).to.be.eql(\"password não pode ficar em branco\");\r",
									"    pm.expect(data.administrador).to.be.eql(\"administrador deve ser 'true' ou 'false'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": \"\",\r\n    \"email\": \"\",\r\n    \"nome\": \"\",\r\n    \"password\" :\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "12 - Delete user ID null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"No records deleted\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Nenhum registro excluído\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"null\", null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/usuarios/{{null}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{null}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "13 - Delete user ID empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 405 Method not allowed\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Não é possível realizar DELETE em /usuarios/. Acesse https://serverest.dev para ver as rotas disponíveis e como utilizá-las.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"empty\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/usuarios/{{empty}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{empty}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "14 - Delete user ID String",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"No records deleted\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Nenhum registro excluído\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"string\", \"Test\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/usuarios/{{string}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{string}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "15 - Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/usuarios/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "16 - Delete user already deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"No records deleted\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Nenhum registro excluído\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/usuarios/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "1 - List Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/produtos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Creat Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"id\", data._id);\r",
									"\r",
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    pm.expect(data.message).to.be.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": \"true\",\r\n    \"email\": \"leoadmin@api.com\",\r\n    \"nome\": \"Leo Admin API\",\r\n    \"password\" :\"LeoApi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Login admin account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"token\", data.authorization);\r",
									"pm.environment.set(\"parts\", pm.environment.get(\"token\").split(' '));\r",
									"pm.environment.set(\"authorization\", pm.environment.get(\"parts\")[1]);\r",
									"\r",
									"pm.test(\"Return Status 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Login realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"leoadmin@api.com\",\r\n  \"password\": \"LeoApi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Creat a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"idProduct\", data._id);\r",
									"\r",
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Aut test\",\r\n  \"preco\": 30,\r\n  \"descricao\": \"Test\",\r\n  \"quantidade\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/produtos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 - Creat a product no authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: no authorization\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomProductMaterial}}\",\r\n  \"preco\": 30,\r\n  \"descricao\": \"Test\",\r\n  \"quantidade\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/produtos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "6 - Creat a product Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.nome).to.be.eql(\"nome deve ser uma string\");\r",
									"    pm.expect(data.preco).to.be.eql(\"preco deve ser um número\");\r",
									"    pm.expect(data.descricao).to.be.eql(\"descricao deve ser uma string\");\r",
									"    pm.expect(data.quantidade).to.be.eql(\"quantidade deve ser um número\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": null,\r\n  \"preco\": null,\r\n  \"descricao\": null,\r\n  \"quantidade\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/produtos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "7 - Creat a product Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.nome).to.be.eql(\"nome não pode ficar em branco\");\r",
									"    pm.expect(data.preco).to.be.eql(\"preco deve ser um número\");\r",
									"    pm.expect(data.descricao).to.be.eql(\"descricao não pode ficar em branco\");\r",
									"    pm.expect(data.quantidade).to.be.eql(\"quantidade deve ser um número\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": \"\",\r\n  \"descricao\": \"\",\r\n  \"quantidade\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/produtos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "8 - List Product Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/produtos/{{idProduct}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "9 - List Product Id Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Product not found\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Produto não encontrado\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"null\", null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/produtos/{{null}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{null}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "10 - List Product Id string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Product not found\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Produto não encontrado\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"string\", \"test\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/produtos/{{string}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{string}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "11 - Edit a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration changed successfully\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro alterado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"aut test edit\",\r\n  \"preco\": 15,\r\n  \"descricao\": \"Test\",\r\n  \"quantidade\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/produtos/{{idProduct}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "12- Edit a product no authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: no authorization\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomProductMaterial}}\",\r\n  \"preco\": 15,\r\n  \"descricao\": \"Test\",\r\n  \"quantidade\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/produtos/{{idProduct}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "13 - Edit a product Id null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.nome).to.be.eql(\"nome deve ser uma string\");\r",
									"    pm.expect(data.preco).to.be.eql(\"preco deve ser um número\");\r",
									"    pm.expect(data.descricao).to.be.eql(\"descricao deve ser uma string\");\r",
									"    pm.expect(data.quantidade).to.be.eql(\"quantidade deve ser um número\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": null,\r\n  \"preco\": null,\r\n  \"descricao\": null,\r\n  \"quantidade\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/produtos/{{idProduct}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "14 - Edit a product Id empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.nome).to.be.eql(\"nome não pode ficar em branco\");\r",
									"    pm.expect(data.preco).to.be.eql(\"preco deve ser um número\");\r",
									"    pm.expect(data.descricao).to.be.eql(\"descricao não pode ficar em branco\");\r",
									"    pm.expect(data.quantidade).to.be.eql(\"quantidade deve ser um número\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": \"\",\r\n  \"descricao\": \"\",\r\n  \"quantidade\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/produtos/{{idProduct}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "15 - Delete Product no authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: no authorization\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"null\", null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/produtos/{{idProduct}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "16 - Delete Product Id null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: No records deleted\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Nenhum registro excluído\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"null\", null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/produtos/{{null}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{null}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "17 - Delete Product Id empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 405 Method Not Allowed\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.contain(\"Não é possível realizar DELETE\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"empty\", \"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/produtos/{{empty}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{empty}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "18 - Delete Product Id string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: No records deleted\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Nenhum registro excluído\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"empty\", \"test\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/produtos/{{empty}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{empty}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "19 - Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: This email is already in use\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/produtos/{{idProduct}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "20 - Delete admin account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: This email is already in use\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Car shop",
			"item": [
				{
					"name": "1 - List car shop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/carrinhos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Creat Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"id\", data._id);\r",
									"\r",
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    pm.expect(data.message).to.be.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"administrador\": \"true\",\r\n    \"email\": \"leoadmin@api.com\",\r\n    \"nome\": \"Leo Admin API\",\r\n    \"password\" :\"LeoApi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Login admin account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"token\", data.authorization);\r",
									"pm.environment.set(\"parts\", pm.environment.get(\"token\").split(' '));\r",
									"pm.environment.set(\"authorization\", pm.environment.get(\"parts\")[1]);\r",
									"\r",
									"pm.test(\"Return Status 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Login realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"leoadmin@api.com\",\r\n  \"password\": \"LeoApi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Creat a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"idProduct\", data._id);\r",
									"\r",
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Aut test\",\r\n  \"preco\": 30,\r\n  \"descricao\": \"Test\",\r\n  \"quantidade\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/produtos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 - Register car shop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"idCarShop\", data._id);\r",
									"\r",
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduct}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "6 - Register car shop same product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: It is not allowed to have more than 1 trolley\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Não é permitido ter mais de 1 carrinho\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduct}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "7 - Register car shop no authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: no authorization\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduct}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "8 - Register car shop null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(pm.response.text()).to.include(\"produtos[0].idProduto deve ser uma string\");\r",
									"    pm.expect(pm.response.text()).to.include(\"produtos[0].quantidade deve ser um número\");\r",
									"    pm.expect(data.produtos).to.be.eql(\"produtos não contém 1 valor obrigatório\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": null,\r\n      \"quantidade\": null\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "9 - Register car shop empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(pm.response.text()).to.include(\"produtos[0].idProduto não pode ficar em branco\");\r",
									"    pm.expect(pm.response.text()).to.include(\"produtos[0].quantidade deve ser um número positivo\");\r",
									"    pm.expect(data.produtos).to.be.eql(\"produtos não contém 1 valor obrigatório\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"\",\r\n      \"quantidade\": 0\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "10 - List car shop search by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/carrinhos/{{idCarShop}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos",
								"{{idCarShop}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "11 - List car shop search by Id null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Car shop not found\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Carrinho não encontrado\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"null\", null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/carrinhos/{{null}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos",
								"{{null}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "12 - List car shop search by Id string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Car shop not found\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Carrinho não encontrado\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"string\", \"test\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/carrinhos/{{string}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos",
								"{{string}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "13 - Complete purchase no authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: no authorization\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduct}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos/concluir-compra",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "14 - Complete purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduct}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos/concluir-compra",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "15 - Complete purchase with no product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: No cart found for this user\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Não foi encontrado carrinho para esse usuário\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduct}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos/concluir-compra",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "16 - Register car shop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.environment.set(\"idCarShop\", data._id);\r",
									"\r",
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduct}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "17 - Cancel purchase no authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: no authorization\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduct}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos/cancelar-compra",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "18 - Cancel purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: Registration successful\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro excluído com sucesso. Estoque dos produtos reabastecido\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduct}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos/cancelar-compra",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "19 - Cancel purchase with no product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 201 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: No cart found for this user\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Não foi encontrado carrinho para esse usuário\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduct}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/carrinhos/cancelar-compra",
							"host": [
								"{{URL}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "20 - Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: This email is already in use\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/produtos/{{idProduct}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"produtos",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "21 - Delete admin account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Return Status 200 ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Process time less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Checking the ResponseBodyErrorNull value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"pm.test(\"Message: This email is already in use\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.be.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/usuarios/{{id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}